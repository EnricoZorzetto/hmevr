// Generated by rstantools.  Do not edit by hand.

/*
    hbevr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    hbevr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with hbevr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_mix_dyn_bin_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_mix_dyn_bin");
    reader.add_event(191, 189, "end", "model_mix_dyn_bin");
    return reader;
}
#include <stan_meta_header.hpp>
class model_mix_dyn_bin : public prob_grad {
private:
        int M;
        int Mgen;
        int Nt;
        std::vector<std::vector<double> > y;
        std::vector<int> N;
        std::vector<double> mc10prior;
        std::vector<double> sc10prior;
        std::vector<double> mw10prior;
        std::vector<double> sw10prior;
        std::vector<double> mc20prior;
        std::vector<double> sc20prior;
        std::vector<double> mw20prior;
        std::vector<double> sw20prior;
        std::vector<double> rhoj0prior;
        std::vector<double> pn0prior;
public:
    model_mix_dyn_bin(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_mix_dyn_bin(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_mix_dyn_bin_namespace::model_mix_dyn_bin";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            check_greater_or_equal(function__, "M", M, 1);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "Mgen", "int", context__.to_vec());
            Mgen = int(0);
            vals_i__ = context__.vals_i("Mgen");
            pos__ = 0;
            Mgen = vals_i__[pos__++];
            check_greater_or_equal(function__, "Mgen", Mgen, 1);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "Nt", "int", context__.to_vec());
            Nt = int(0);
            vals_i__ = context__.vals_i("Nt");
            pos__ = 0;
            Nt = vals_i__[pos__++];
            check_greater_or_equal(function__, "Nt", Nt, 1);
            current_statement_begin__ = 6;
            validate_non_negative_index("y", "M", M);
            validate_non_negative_index("y", "Nt", Nt);
            context__.validate_dims("data initialization", "y", "double", context__.to_vec(M,Nt));
            y = std::vector<std::vector<double> >(M, std::vector<double>(Nt, double(0)));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_k_0_max__ = M;
            size_t y_k_1_max__ = Nt;
            for (size_t k_1__ = 0; k_1__ < y_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                    y[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            size_t y_i_0_max__ = M;
            size_t y_i_1_max__ = Nt;
            for (size_t i_0__ = 0; i_0__ < y_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < y_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "y[i_0__][i_1__]", y[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("N", "M", M);
            context__.validate_dims("data initialization", "N", "int", context__.to_vec(M));
            N = std::vector<int>(M, int(0));
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            size_t N_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < N_k_0_max__; ++k_0__) {
                N[k_0__] = vals_i__[pos__++];
            }
            size_t N_i_0_max__ = M;
            for (size_t i_0__ = 0; i_0__ < N_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "N[i_0__]", N[i_0__], 0);
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("mc10prior", "2", 2);
            context__.validate_dims("data initialization", "mc10prior", "double", context__.to_vec(2));
            mc10prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("mc10prior");
            pos__ = 0;
            size_t mc10prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < mc10prior_k_0_max__; ++k_0__) {
                mc10prior[k_0__] = vals_r__[pos__++];
            }
            size_t mc10prior_i_0_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < mc10prior_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "mc10prior[i_0__]", mc10prior[i_0__], 0);
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("sc10prior", "2", 2);
            context__.validate_dims("data initialization", "sc10prior", "double", context__.to_vec(2));
            sc10prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("sc10prior");
            pos__ = 0;
            size_t sc10prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < sc10prior_k_0_max__; ++k_0__) {
                sc10prior[k_0__] = vals_r__[pos__++];
            }
            size_t sc10prior_i_0_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < sc10prior_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sc10prior[i_0__]", sc10prior[i_0__], 0);
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("mw10prior", "2", 2);
            context__.validate_dims("data initialization", "mw10prior", "double", context__.to_vec(2));
            mw10prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("mw10prior");
            pos__ = 0;
            size_t mw10prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < mw10prior_k_0_max__; ++k_0__) {
                mw10prior[k_0__] = vals_r__[pos__++];
            }
            size_t mw10prior_i_0_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < mw10prior_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "mw10prior[i_0__]", mw10prior[i_0__], 0);
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("sw10prior", "2", 2);
            context__.validate_dims("data initialization", "sw10prior", "double", context__.to_vec(2));
            sw10prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("sw10prior");
            pos__ = 0;
            size_t sw10prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < sw10prior_k_0_max__; ++k_0__) {
                sw10prior[k_0__] = vals_r__[pos__++];
            }
            size_t sw10prior_i_0_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < sw10prior_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sw10prior[i_0__]", sw10prior[i_0__], 0);
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("mc20prior", "2", 2);
            context__.validate_dims("data initialization", "mc20prior", "double", context__.to_vec(2));
            mc20prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("mc20prior");
            pos__ = 0;
            size_t mc20prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < mc20prior_k_0_max__; ++k_0__) {
                mc20prior[k_0__] = vals_r__[pos__++];
            }
            size_t mc20prior_i_0_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < mc20prior_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "mc20prior[i_0__]", mc20prior[i_0__], 0);
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("sc20prior", "2", 2);
            context__.validate_dims("data initialization", "sc20prior", "double", context__.to_vec(2));
            sc20prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("sc20prior");
            pos__ = 0;
            size_t sc20prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < sc20prior_k_0_max__; ++k_0__) {
                sc20prior[k_0__] = vals_r__[pos__++];
            }
            size_t sc20prior_i_0_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < sc20prior_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sc20prior[i_0__]", sc20prior[i_0__], 0);
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("mw20prior", "2", 2);
            context__.validate_dims("data initialization", "mw20prior", "double", context__.to_vec(2));
            mw20prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("mw20prior");
            pos__ = 0;
            size_t mw20prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < mw20prior_k_0_max__; ++k_0__) {
                mw20prior[k_0__] = vals_r__[pos__++];
            }
            size_t mw20prior_i_0_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < mw20prior_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "mw20prior[i_0__]", mw20prior[i_0__], 0);
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("sw20prior", "2", 2);
            context__.validate_dims("data initialization", "sw20prior", "double", context__.to_vec(2));
            sw20prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("sw20prior");
            pos__ = 0;
            size_t sw20prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < sw20prior_k_0_max__; ++k_0__) {
                sw20prior[k_0__] = vals_r__[pos__++];
            }
            size_t sw20prior_i_0_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < sw20prior_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sw20prior[i_0__]", sw20prior[i_0__], 0);
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("rhoj0prior", "2", 2);
            context__.validate_dims("data initialization", "rhoj0prior", "double", context__.to_vec(2));
            rhoj0prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("rhoj0prior");
            pos__ = 0;
            size_t rhoj0prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < rhoj0prior_k_0_max__; ++k_0__) {
                rhoj0prior[k_0__] = vals_r__[pos__++];
            }
            size_t rhoj0prior_i_0_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < rhoj0prior_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "rhoj0prior[i_0__]", rhoj0prior[i_0__], 0);
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("pn0prior", "2", 2);
            context__.validate_dims("data initialization", "pn0prior", "double", context__.to_vec(2));
            pn0prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("pn0prior");
            pos__ = 0;
            size_t pn0prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < pn0prior_k_0_max__; ++k_0__) {
                pn0prior[k_0__] = vals_r__[pos__++];
            }
            size_t pn0prior_i_0_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < pn0prior_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "pn0prior[i_0__]", pn0prior[i_0__], 0);
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 26;
            validate_non_negative_index("C2", "M", M);
            num_params_r__ += (1 * M);
            current_statement_begin__ = 27;
            validate_non_negative_index("w2", "M", M);
            num_params_r__ += (1 * M);
            current_statement_begin__ = 28;
            num_params_r__ += 1;
            current_statement_begin__ = 29;
            num_params_r__ += 1;
            current_statement_begin__ = 30;
            num_params_r__ += 1;
            current_statement_begin__ = 31;
            num_params_r__ += 1;
            current_statement_begin__ = 40;
            validate_non_negative_index("C1", "M", M);
            num_params_r__ += (1 * M);
            current_statement_begin__ = 41;
            validate_non_negative_index("w1", "M", M);
            num_params_r__ += (1 * M);
            current_statement_begin__ = 42;
            num_params_r__ += 1;
            current_statement_begin__ = 43;
            num_params_r__ += 1;
            current_statement_begin__ = 44;
            num_params_r__ += 1;
            current_statement_begin__ = 45;
            num_params_r__ += 1;
            current_statement_begin__ = 46;
            num_params_r__ += 1;
            current_statement_begin__ = 47;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_mix_dyn_bin() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 26;
        if (!(context__.contains_r("C2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable C2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("C2");
        pos__ = 0U;
        validate_non_negative_index("C2", "M", M);
        context__.validate_dims("parameter initialization", "C2", "double", context__.to_vec(M));
        std::vector<double> C2(M, double(0));
        size_t C2_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < C2_k_0_max__; ++k_0__) {
            C2[k_0__] = vals_r__[pos__++];
        }
        size_t C2_i_0_max__ = M;
        for (size_t i_0__ = 0; i_0__ < C2_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, C2[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable C2: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 27;
        if (!(context__.contains_r("w2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable w2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("w2");
        pos__ = 0U;
        validate_non_negative_index("w2", "M", M);
        context__.validate_dims("parameter initialization", "w2", "double", context__.to_vec(M));
        std::vector<double> w2(M, double(0));
        size_t w2_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < w2_k_0_max__; ++k_0__) {
            w2[k_0__] = vals_r__[pos__++];
        }
        size_t w2_i_0_max__ = M;
        for (size_t i_0__ = 0; i_0__ < w2_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, w2[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable w2: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 28;
        if (!(context__.contains_r("mc2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mc2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mc2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mc2", "double", context__.to_vec());
        double mc2(0);
        mc2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, mc2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mc2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 29;
        if (!(context__.contains_r("sc2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sc2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sc2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sc2", "double", context__.to_vec());
        double sc2(0);
        sc2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sc2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sc2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 30;
        if (!(context__.contains_r("mw2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mw2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mw2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mw2", "double", context__.to_vec());
        double mw2(0);
        mw2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, mw2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mw2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 31;
        if (!(context__.contains_r("sw2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sw2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sw2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sw2", "double", context__.to_vec());
        double sw2(0);
        sw2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sw2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sw2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 40;
        if (!(context__.contains_r("C1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable C1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("C1");
        pos__ = 0U;
        validate_non_negative_index("C1", "M", M);
        context__.validate_dims("parameter initialization", "C1", "double", context__.to_vec(M));
        std::vector<double> C1(M, double(0));
        size_t C1_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < C1_k_0_max__; ++k_0__) {
            C1[k_0__] = vals_r__[pos__++];
        }
        size_t C1_i_0_max__ = M;
        for (size_t i_0__ = 0; i_0__ < C1_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, C1[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable C1: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 41;
        if (!(context__.contains_r("w1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable w1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("w1");
        pos__ = 0U;
        validate_non_negative_index("w1", "M", M);
        context__.validate_dims("parameter initialization", "w1", "double", context__.to_vec(M));
        std::vector<double> w1(M, double(0));
        size_t w1_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < w1_k_0_max__; ++k_0__) {
            w1[k_0__] = vals_r__[pos__++];
        }
        size_t w1_i_0_max__ = M;
        for (size_t i_0__ = 0; i_0__ < w1_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, w1[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable w1: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 42;
        if (!(context__.contains_r("mc1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mc1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mc1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mc1", "double", context__.to_vec());
        double mc1(0);
        mc1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, mc1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mc1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 43;
        if (!(context__.contains_r("sc1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sc1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sc1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sc1", "double", context__.to_vec());
        double sc1(0);
        sc1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sc1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sc1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 44;
        if (!(context__.contains_r("mw1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mw1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mw1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mw1", "double", context__.to_vec());
        double mw1(0);
        mw1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, mw1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mw1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 45;
        if (!(context__.contains_r("sw1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sw1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sw1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sw1", "double", context__.to_vec());
        double sw1(0);
        sw1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sw1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sw1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 46;
        if (!(context__.contains_r("pn")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable pn missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("pn");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "pn", "double", context__.to_vec());
        double pn(0);
        pn = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, pn);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable pn: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 47;
        if (!(context__.contains_r("rhoj")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rhoj missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rhoj");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rhoj", "double", context__.to_vec());
        double rhoj(0);
        rhoj = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, rhoj);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rhoj: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 26;
            std::vector<local_scalar_t__> C2;
            size_t C2_d_0_max__ = M;
            C2.reserve(C2_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < C2_d_0_max__; ++d_0__) {
                if (jacobian__)
                    C2.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    C2.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 27;
            std::vector<local_scalar_t__> w2;
            size_t w2_d_0_max__ = M;
            w2.reserve(w2_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < w2_d_0_max__; ++d_0__) {
                if (jacobian__)
                    w2.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    w2.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 28;
            local_scalar_t__ mc2;
            (void) mc2;  // dummy to suppress unused var warning
            if (jacobian__)
                mc2 = in__.scalar_lb_constrain(0, lp__);
            else
                mc2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 29;
            local_scalar_t__ sc2;
            (void) sc2;  // dummy to suppress unused var warning
            if (jacobian__)
                sc2 = in__.scalar_lb_constrain(0, lp__);
            else
                sc2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 30;
            local_scalar_t__ mw2;
            (void) mw2;  // dummy to suppress unused var warning
            if (jacobian__)
                mw2 = in__.scalar_lb_constrain(0, lp__);
            else
                mw2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 31;
            local_scalar_t__ sw2;
            (void) sw2;  // dummy to suppress unused var warning
            if (jacobian__)
                sw2 = in__.scalar_lb_constrain(0, lp__);
            else
                sw2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 40;
            std::vector<local_scalar_t__> C1;
            size_t C1_d_0_max__ = M;
            C1.reserve(C1_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < C1_d_0_max__; ++d_0__) {
                if (jacobian__)
                    C1.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    C1.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 41;
            std::vector<local_scalar_t__> w1;
            size_t w1_d_0_max__ = M;
            w1.reserve(w1_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < w1_d_0_max__; ++d_0__) {
                if (jacobian__)
                    w1.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    w1.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 42;
            local_scalar_t__ mc1;
            (void) mc1;  // dummy to suppress unused var warning
            if (jacobian__)
                mc1 = in__.scalar_lb_constrain(0, lp__);
            else
                mc1 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 43;
            local_scalar_t__ sc1;
            (void) sc1;  // dummy to suppress unused var warning
            if (jacobian__)
                sc1 = in__.scalar_lb_constrain(0, lp__);
            else
                sc1 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 44;
            local_scalar_t__ mw1;
            (void) mw1;  // dummy to suppress unused var warning
            if (jacobian__)
                mw1 = in__.scalar_lb_constrain(0, lp__);
            else
                mw1 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 45;
            local_scalar_t__ sw1;
            (void) sw1;  // dummy to suppress unused var warning
            if (jacobian__)
                sw1 = in__.scalar_lb_constrain(0, lp__);
            else
                sw1 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 46;
            local_scalar_t__ pn;
            (void) pn;  // dummy to suppress unused var warning
            if (jacobian__)
                pn = in__.scalar_lub_constrain(0, 1, lp__);
            else
                pn = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 47;
            local_scalar_t__ rhoj;
            (void) rhoj;  // dummy to suppress unused var warning
            if (jacobian__)
                rhoj = in__.scalar_lub_constrain(0, 1, lp__);
            else
                rhoj = in__.scalar_lub_constrain(0, 1);
            // transformed parameters
            current_statement_begin__ = 50;
            local_scalar_t__ ac1;
            (void) ac1;  // dummy to suppress unused var warning
            stan::math::initialize(ac1, DUMMY_VAR__);
            stan::math::fill(ac1, DUMMY_VAR__);
            current_statement_begin__ = 51;
            local_scalar_t__ bc1;
            (void) bc1;  // dummy to suppress unused var warning
            stan::math::initialize(bc1, DUMMY_VAR__);
            stan::math::fill(bc1, DUMMY_VAR__);
            current_statement_begin__ = 52;
            local_scalar_t__ aw1;
            (void) aw1;  // dummy to suppress unused var warning
            stan::math::initialize(aw1, DUMMY_VAR__);
            stan::math::fill(aw1, DUMMY_VAR__);
            current_statement_begin__ = 53;
            local_scalar_t__ bw1;
            (void) bw1;  // dummy to suppress unused var warning
            stan::math::initialize(bw1, DUMMY_VAR__);
            stan::math::fill(bw1, DUMMY_VAR__);
            current_statement_begin__ = 54;
            local_scalar_t__ ac2;
            (void) ac2;  // dummy to suppress unused var warning
            stan::math::initialize(ac2, DUMMY_VAR__);
            stan::math::fill(ac2, DUMMY_VAR__);
            current_statement_begin__ = 55;
            local_scalar_t__ bc2;
            (void) bc2;  // dummy to suppress unused var warning
            stan::math::initialize(bc2, DUMMY_VAR__);
            stan::math::fill(bc2, DUMMY_VAR__);
            current_statement_begin__ = 56;
            local_scalar_t__ aw2;
            (void) aw2;  // dummy to suppress unused var warning
            stan::math::initialize(aw2, DUMMY_VAR__);
            stan::math::fill(aw2, DUMMY_VAR__);
            current_statement_begin__ = 57;
            local_scalar_t__ bw2;
            (void) bw2;  // dummy to suppress unused var warning
            stan::math::initialize(bw2, DUMMY_VAR__);
            stan::math::fill(bw2, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 70;
            stan::math::assign(ac1, pow((mc1 / sc1), 2));
            current_statement_begin__ = 71;
            stan::math::assign(aw1, pow((mw1 / sw1), 2));
            current_statement_begin__ = 72;
            stan::math::assign(bc1, (mc1 / pow(sc1, 2)));
            current_statement_begin__ = 73;
            stan::math::assign(bw1, (mw1 / pow(sw1, 2)));
            current_statement_begin__ = 80;
            stan::math::assign(ac2, pow((mc2 / sc2), 2));
            current_statement_begin__ = 81;
            stan::math::assign(bc2, (mc2 / pow(sc2, 2)));
            current_statement_begin__ = 82;
            stan::math::assign(aw2, pow((mw2 / sw2), 2));
            current_statement_begin__ = 83;
            stan::math::assign(bw2, (mw2 / pow(sw2, 2)));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 50;
            if (stan::math::is_uninitialized(ac1)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: ac1";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable ac1: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "ac1", ac1, 0);
            current_statement_begin__ = 51;
            if (stan::math::is_uninitialized(bc1)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: bc1";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable bc1: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "bc1", bc1, 0);
            current_statement_begin__ = 52;
            if (stan::math::is_uninitialized(aw1)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: aw1";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable aw1: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "aw1", aw1, 0);
            current_statement_begin__ = 53;
            if (stan::math::is_uninitialized(bw1)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: bw1";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable bw1: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "bw1", bw1, 0);
            current_statement_begin__ = 54;
            if (stan::math::is_uninitialized(ac2)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: ac2";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable ac2: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "ac2", ac2, 0);
            current_statement_begin__ = 55;
            if (stan::math::is_uninitialized(bc2)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: bc2";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable bc2: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "bc2", bc2, 0);
            current_statement_begin__ = 56;
            if (stan::math::is_uninitialized(aw2)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: aw2";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable aw2: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "aw2", aw2, 0);
            current_statement_begin__ = 57;
            if (stan::math::is_uninitialized(bw2)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: bw2";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable bw2: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "bw2", bw2, 0);
            // model body
            current_statement_begin__ = 88;
            lp_accum__.add(beta_log<propto__>(rhoj, get_base1(rhoj0prior, 1, "rhoj0prior", 1), get_base1(rhoj0prior, 2, "rhoj0prior", 1)));
            current_statement_begin__ = 89;
            lp_accum__.add(beta_log<propto__>(pn, get_base1(pn0prior, 1, "pn0prior", 1), get_base1(pn0prior, 2, "pn0prior", 1)));
            current_statement_begin__ = 101;
            lp_accum__.add(inv_gamma_log<propto__>(mw1, get_base1(mw10prior, 1, "mw10prior", 1), get_base1(mw10prior, 2, "mw10prior", 1)));
            current_statement_begin__ = 102;
            lp_accum__.add(inv_gamma_log<propto__>(sw1, get_base1(sw10prior, 1, "sw10prior", 1), get_base1(sw10prior, 2, "sw10prior", 1)));
            current_statement_begin__ = 103;
            lp_accum__.add(inv_gamma_log<propto__>(mc1, get_base1(mc10prior, 1, "mc10prior", 1), get_base1(mc10prior, 2, "mc10prior", 1)));
            current_statement_begin__ = 104;
            lp_accum__.add(inv_gamma_log<propto__>(sc1, get_base1(sc10prior, 1, "sc10prior", 1), get_base1(sc10prior, 2, "sc10prior", 1)));
            current_statement_begin__ = 106;
            lp_accum__.add(inv_gamma_log<propto__>(mw2, get_base1(mw20prior, 1, "mw20prior", 1), get_base1(mw20prior, 2, "mw20prior", 1)));
            current_statement_begin__ = 107;
            lp_accum__.add(inv_gamma_log<propto__>(sw2, get_base1(sw20prior, 1, "sw20prior", 1), get_base1(sw20prior, 2, "sw20prior", 1)));
            current_statement_begin__ = 108;
            lp_accum__.add(inv_gamma_log<propto__>(mc2, get_base1(mc20prior, 1, "mc20prior", 1), get_base1(mc20prior, 2, "mc20prior", 1)));
            current_statement_begin__ = 109;
            lp_accum__.add(inv_gamma_log<propto__>(sc2, get_base1(sc20prior, 1, "sc20prior", 1), get_base1(sc20prior, 2, "sc20prior", 1)));
            current_statement_begin__ = 124;
            lp_accum__.add(gamma_log<propto__>(C2, ac2, bc2));
            current_statement_begin__ = 125;
            lp_accum__.add(gamma_log<propto__>(w2, aw2, bw2));
            current_statement_begin__ = 126;
            lp_accum__.add(gamma_log<propto__>(C1, ac1, bc1));
            current_statement_begin__ = 127;
            lp_accum__.add(gamma_log<propto__>(w1, aw1, bw1));
            current_statement_begin__ = 129;
            for (int m = 1; m <= M; ++m) {
                current_statement_begin__ = 130;
                lp_accum__.add(binomial_log(get_base1(N, m, "N", 1), Nt, pn));
                current_statement_begin__ = 131;
                for (int j = 1; j <= Nt; ++j) {
                    current_statement_begin__ = 132;
                    if (as_bool(logical_gt(get_base1(get_base1(y, m, "y", 1), j, "y", 2), 1e-6))) {
                        current_statement_begin__ = 133;
                        lp_accum__.add(log_mix(rhoj, weibull_log(get_base1(get_base1(y, m, "y", 1), j, "y", 2), get_base1(w1, m, "w1", 1), get_base1(C1, m, "C1", 1)), weibull_log(get_base1(get_base1(y, m, "y", 1), j, "y", 2), get_base1(w2, m, "w2", 1), get_base1(C2, m, "C2", 1))));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("C2");
        names__.push_back("w2");
        names__.push_back("mc2");
        names__.push_back("sc2");
        names__.push_back("mw2");
        names__.push_back("sw2");
        names__.push_back("C1");
        names__.push_back("w1");
        names__.push_back("mc1");
        names__.push_back("sc1");
        names__.push_back("mw1");
        names__.push_back("sw1");
        names__.push_back("pn");
        names__.push_back("rhoj");
        names__.push_back("ac1");
        names__.push_back("bc1");
        names__.push_back("aw1");
        names__.push_back("bw1");
        names__.push_back("ac2");
        names__.push_back("bc2");
        names__.push_back("aw2");
        names__.push_back("bw2");
        names__.push_back("Ngen");
        names__.push_back("Cgen2");
        names__.push_back("Cgen1");
        names__.push_back("wgen2");
        names__.push_back("wgen1");
        names__.push_back("rho");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Mgen);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Mgen);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Mgen);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Mgen);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Mgen);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Mgen);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_mix_dyn_bin_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> C2;
        size_t C2_d_0_max__ = M;
        C2.reserve(C2_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < C2_d_0_max__; ++d_0__) {
            C2.push_back(in__.scalar_lb_constrain(0));
        }
        size_t C2_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < C2_k_0_max__; ++k_0__) {
            vars__.push_back(C2[k_0__]);
        }
        std::vector<double> w2;
        size_t w2_d_0_max__ = M;
        w2.reserve(w2_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < w2_d_0_max__; ++d_0__) {
            w2.push_back(in__.scalar_lb_constrain(0));
        }
        size_t w2_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < w2_k_0_max__; ++k_0__) {
            vars__.push_back(w2[k_0__]);
        }
        double mc2 = in__.scalar_lb_constrain(0);
        vars__.push_back(mc2);
        double sc2 = in__.scalar_lb_constrain(0);
        vars__.push_back(sc2);
        double mw2 = in__.scalar_lb_constrain(0);
        vars__.push_back(mw2);
        double sw2 = in__.scalar_lb_constrain(0);
        vars__.push_back(sw2);
        std::vector<double> C1;
        size_t C1_d_0_max__ = M;
        C1.reserve(C1_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < C1_d_0_max__; ++d_0__) {
            C1.push_back(in__.scalar_lb_constrain(0));
        }
        size_t C1_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < C1_k_0_max__; ++k_0__) {
            vars__.push_back(C1[k_0__]);
        }
        std::vector<double> w1;
        size_t w1_d_0_max__ = M;
        w1.reserve(w1_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < w1_d_0_max__; ++d_0__) {
            w1.push_back(in__.scalar_lb_constrain(0));
        }
        size_t w1_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < w1_k_0_max__; ++k_0__) {
            vars__.push_back(w1[k_0__]);
        }
        double mc1 = in__.scalar_lb_constrain(0);
        vars__.push_back(mc1);
        double sc1 = in__.scalar_lb_constrain(0);
        vars__.push_back(sc1);
        double mw1 = in__.scalar_lb_constrain(0);
        vars__.push_back(mw1);
        double sw1 = in__.scalar_lb_constrain(0);
        vars__.push_back(sw1);
        double pn = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(pn);
        double rhoj = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(rhoj);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 50;
            double ac1;
            (void) ac1;  // dummy to suppress unused var warning
            stan::math::initialize(ac1, DUMMY_VAR__);
            stan::math::fill(ac1, DUMMY_VAR__);
            current_statement_begin__ = 51;
            double bc1;
            (void) bc1;  // dummy to suppress unused var warning
            stan::math::initialize(bc1, DUMMY_VAR__);
            stan::math::fill(bc1, DUMMY_VAR__);
            current_statement_begin__ = 52;
            double aw1;
            (void) aw1;  // dummy to suppress unused var warning
            stan::math::initialize(aw1, DUMMY_VAR__);
            stan::math::fill(aw1, DUMMY_VAR__);
            current_statement_begin__ = 53;
            double bw1;
            (void) bw1;  // dummy to suppress unused var warning
            stan::math::initialize(bw1, DUMMY_VAR__);
            stan::math::fill(bw1, DUMMY_VAR__);
            current_statement_begin__ = 54;
            double ac2;
            (void) ac2;  // dummy to suppress unused var warning
            stan::math::initialize(ac2, DUMMY_VAR__);
            stan::math::fill(ac2, DUMMY_VAR__);
            current_statement_begin__ = 55;
            double bc2;
            (void) bc2;  // dummy to suppress unused var warning
            stan::math::initialize(bc2, DUMMY_VAR__);
            stan::math::fill(bc2, DUMMY_VAR__);
            current_statement_begin__ = 56;
            double aw2;
            (void) aw2;  // dummy to suppress unused var warning
            stan::math::initialize(aw2, DUMMY_VAR__);
            stan::math::fill(aw2, DUMMY_VAR__);
            current_statement_begin__ = 57;
            double bw2;
            (void) bw2;  // dummy to suppress unused var warning
            stan::math::initialize(bw2, DUMMY_VAR__);
            stan::math::fill(bw2, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 70;
            stan::math::assign(ac1, pow((mc1 / sc1), 2));
            current_statement_begin__ = 71;
            stan::math::assign(aw1, pow((mw1 / sw1), 2));
            current_statement_begin__ = 72;
            stan::math::assign(bc1, (mc1 / pow(sc1, 2)));
            current_statement_begin__ = 73;
            stan::math::assign(bw1, (mw1 / pow(sw1, 2)));
            current_statement_begin__ = 80;
            stan::math::assign(ac2, pow((mc2 / sc2), 2));
            current_statement_begin__ = 81;
            stan::math::assign(bc2, (mc2 / pow(sc2, 2)));
            current_statement_begin__ = 82;
            stan::math::assign(aw2, pow((mw2 / sw2), 2));
            current_statement_begin__ = 83;
            stan::math::assign(bw2, (mw2 / pow(sw2, 2)));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 50;
            check_greater_or_equal(function__, "ac1", ac1, 0);
            current_statement_begin__ = 51;
            check_greater_or_equal(function__, "bc1", bc1, 0);
            current_statement_begin__ = 52;
            check_greater_or_equal(function__, "aw1", aw1, 0);
            current_statement_begin__ = 53;
            check_greater_or_equal(function__, "bw1", bw1, 0);
            current_statement_begin__ = 54;
            check_greater_or_equal(function__, "ac2", ac2, 0);
            current_statement_begin__ = 55;
            check_greater_or_equal(function__, "bc2", bc2, 0);
            current_statement_begin__ = 56;
            check_greater_or_equal(function__, "aw2", aw2, 0);
            current_statement_begin__ = 57;
            check_greater_or_equal(function__, "bw2", bw2, 0);
            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(ac1);
                vars__.push_back(bc1);
                vars__.push_back(aw1);
                vars__.push_back(bw1);
                vars__.push_back(ac2);
                vars__.push_back(bc2);
                vars__.push_back(aw2);
                vars__.push_back(bw2);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 146;
            validate_non_negative_index("Ngen", "Mgen", Mgen);
            std::vector<int> Ngen(Mgen, int(0));
            stan::math::fill(Ngen, std::numeric_limits<int>::min());
            current_statement_begin__ = 147;
            validate_non_negative_index("Cgen2", "Mgen", Mgen);
            std::vector<double> Cgen2(Mgen, double(0));
            stan::math::initialize(Cgen2, DUMMY_VAR__);
            stan::math::fill(Cgen2, DUMMY_VAR__);
            current_statement_begin__ = 148;
            validate_non_negative_index("Cgen1", "Mgen", Mgen);
            std::vector<double> Cgen1(Mgen, double(0));
            stan::math::initialize(Cgen1, DUMMY_VAR__);
            stan::math::fill(Cgen1, DUMMY_VAR__);
            current_statement_begin__ = 149;
            validate_non_negative_index("wgen2", "Mgen", Mgen);
            std::vector<double> wgen2(Mgen, double(0));
            stan::math::initialize(wgen2, DUMMY_VAR__);
            stan::math::fill(wgen2, DUMMY_VAR__);
            current_statement_begin__ = 150;
            validate_non_negative_index("wgen1", "Mgen", Mgen);
            std::vector<double> wgen1(Mgen, double(0));
            stan::math::initialize(wgen1, DUMMY_VAR__);
            stan::math::fill(wgen1, DUMMY_VAR__);
            current_statement_begin__ = 151;
            validate_non_negative_index("rho", "Mgen", Mgen);
            std::vector<double> rho(Mgen, double(0));
            stan::math::initialize(rho, DUMMY_VAR__);
            stan::math::fill(rho, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 165;
            for (int m = 1; m <= Mgen; ++m) {
                current_statement_begin__ = 166;
                stan::model::assign(Cgen1, 
                            stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                            gamma_rng(ac1, bc1, base_rng__), 
                            "assigning variable Cgen1");
                current_statement_begin__ = 167;
                stan::model::assign(wgen1, 
                            stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                            gamma_rng(aw1, bw1, base_rng__), 
                            "assigning variable wgen1");
                current_statement_begin__ = 168;
                stan::model::assign(Cgen2, 
                            stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                            gamma_rng(ac2, bc2, base_rng__), 
                            "assigning variable Cgen2");
                current_statement_begin__ = 169;
                stan::model::assign(wgen2, 
                            stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                            gamma_rng(aw2, bw2, base_rng__), 
                            "assigning variable wgen2");
                current_statement_begin__ = 172;
                stan::model::assign(Ngen, 
                            stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                            binomial_rng(Nt, pn, base_rng__), 
                            "assigning variable Ngen");
                current_statement_begin__ = 173;
                stan::model::assign(rho, 
                            stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                            rhoj, 
                            "assigning variable rho");
            }
            // validate, write generated quantities
            current_statement_begin__ = 146;
            size_t Ngen_i_0_max__ = Mgen;
            for (size_t i_0__ = 0; i_0__ < Ngen_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Ngen[i_0__]", Ngen[i_0__], 0);
            }
            size_t Ngen_k_0_max__ = Mgen;
            for (size_t k_0__ = 0; k_0__ < Ngen_k_0_max__; ++k_0__) {
                vars__.push_back(Ngen[k_0__]);
            }
            current_statement_begin__ = 147;
            size_t Cgen2_i_0_max__ = Mgen;
            for (size_t i_0__ = 0; i_0__ < Cgen2_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Cgen2[i_0__]", Cgen2[i_0__], 0);
            }
            size_t Cgen2_k_0_max__ = Mgen;
            for (size_t k_0__ = 0; k_0__ < Cgen2_k_0_max__; ++k_0__) {
                vars__.push_back(Cgen2[k_0__]);
            }
            current_statement_begin__ = 148;
            size_t Cgen1_i_0_max__ = Mgen;
            for (size_t i_0__ = 0; i_0__ < Cgen1_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Cgen1[i_0__]", Cgen1[i_0__], 0);
            }
            size_t Cgen1_k_0_max__ = Mgen;
            for (size_t k_0__ = 0; k_0__ < Cgen1_k_0_max__; ++k_0__) {
                vars__.push_back(Cgen1[k_0__]);
            }
            current_statement_begin__ = 149;
            size_t wgen2_i_0_max__ = Mgen;
            for (size_t i_0__ = 0; i_0__ < wgen2_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "wgen2[i_0__]", wgen2[i_0__], 0);
            }
            size_t wgen2_k_0_max__ = Mgen;
            for (size_t k_0__ = 0; k_0__ < wgen2_k_0_max__; ++k_0__) {
                vars__.push_back(wgen2[k_0__]);
            }
            current_statement_begin__ = 150;
            size_t wgen1_i_0_max__ = Mgen;
            for (size_t i_0__ = 0; i_0__ < wgen1_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "wgen1[i_0__]", wgen1[i_0__], 0);
            }
            size_t wgen1_k_0_max__ = Mgen;
            for (size_t k_0__ = 0; k_0__ < wgen1_k_0_max__; ++k_0__) {
                vars__.push_back(wgen1[k_0__]);
            }
            current_statement_begin__ = 151;
            size_t rho_i_0_max__ = Mgen;
            for (size_t i_0__ = 0; i_0__ < rho_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "rho[i_0__]", rho[i_0__], 0);
                check_less_or_equal(function__, "rho[i_0__]", rho[i_0__], 1);
            }
            size_t rho_k_0_max__ = Mgen;
            for (size_t k_0__ = 0; k_0__ < rho_k_0_max__; ++k_0__) {
                vars__.push_back(rho[k_0__]);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_mix_dyn_bin";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t C2_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < C2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "C2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t w2_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < w2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mc2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sc2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mw2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sw2";
        param_names__.push_back(param_name_stream__.str());
        size_t C1_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < C1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "C1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t w1_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < w1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mc1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sc1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mw1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sw1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rhoj";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ac1";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "bc1";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "aw1";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "bw1";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "ac2";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "bc2";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "aw2";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "bw2";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        size_t Ngen_k_0_max__ = Mgen;
        for (size_t k_0__ = 0; k_0__ < Ngen_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Ngen" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Cgen2_k_0_max__ = Mgen;
        for (size_t k_0__ = 0; k_0__ < Cgen2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Cgen2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Cgen1_k_0_max__ = Mgen;
        for (size_t k_0__ = 0; k_0__ < Cgen1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Cgen1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t wgen2_k_0_max__ = Mgen;
        for (size_t k_0__ = 0; k_0__ < wgen2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "wgen2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t wgen1_k_0_max__ = Mgen;
        for (size_t k_0__ = 0; k_0__ < wgen1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "wgen1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t rho_k_0_max__ = Mgen;
        for (size_t k_0__ = 0; k_0__ < rho_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t C2_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < C2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "C2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t w2_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < w2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mc2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sc2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mw2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sw2";
        param_names__.push_back(param_name_stream__.str());
        size_t C1_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < C1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "C1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t w1_k_0_max__ = M;
        for (size_t k_0__ = 0; k_0__ < w1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mc1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sc1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mw1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sw1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rhoj";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ac1";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "bc1";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "aw1";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "bw1";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "ac2";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "bc2";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "aw2";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "bw2";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        size_t Ngen_k_0_max__ = Mgen;
        for (size_t k_0__ = 0; k_0__ < Ngen_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Ngen" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Cgen2_k_0_max__ = Mgen;
        for (size_t k_0__ = 0; k_0__ < Cgen2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Cgen2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Cgen1_k_0_max__ = Mgen;
        for (size_t k_0__ = 0; k_0__ < Cgen1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Cgen1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t wgen2_k_0_max__ = Mgen;
        for (size_t k_0__ = 0; k_0__ < wgen2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "wgen2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t wgen1_k_0_max__ = Mgen;
        for (size_t k_0__ = 0; k_0__ < wgen1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "wgen1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t rho_k_0_max__ = Mgen;
        for (size_t k_0__ = 0; k_0__ < rho_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_mix_dyn_bin_namespace::model_mix_dyn_bin stan_model;
#endif
